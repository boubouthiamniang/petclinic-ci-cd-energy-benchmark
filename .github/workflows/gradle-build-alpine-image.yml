name: Java CI with Gradle (Alpine) + Eco-CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    strategy:
      matrix:
        java: ['17']
        distribution: ['temurin']

    steps:
      # 1️⃣ Install Alpine dependencies
      - name: Install system dependencies
        run: |
          apk update
          apk add --no-cache \
            bash \
            python3 \
            py3-pip \
            coreutils \
            git \
            curl \
            gcompat \
            libc6-compat \
            wget \
            unzip \
            coreutils

      # 2️⃣ Checkout project code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3️⃣ Clone Eco-CI repository
      - name: Clone Eco-CI repo
        run: |
          git clone https://github.com/green-coding-solutions/eco-ci-energy-estimation.git /tmp/eco-ci
          chmod +x /tmp/eco-ci/scripts/*.sh
          ls -l /tmp/eco-ci/scripts/

      # 4️⃣ Start Eco-CI measurement (all 22 args)
      - name: Start measurement
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          bash /tmp/eco-ci/scripts/setup.sh start_measurement \
            "/tmp/machine_power_data.json" \   # $2 machine power data
            "$GITHUB_RUN_ID" \                 # $3 run ID
            "$GITHUB_REF_NAME" \               # $4 branch
            "$GITHUB_REPOSITORY" \             # $5 repo
            "$GITHUB_WORKFLOW" \               # $6 workflow name
            "$GITHUB_SHA" \                    # $7 commit hash
            "manual" \                         # $8 source
            "true" \                           # $9 send data
            "filter_type" \                     # $10
            "filter_project" \                  # $11
            "filter_machine" \                  # $12
            "tags" \                            # $13
            "constant" \                        # $14 CO2 calculation method
            "0.5" \                             # $15 CO2 grid intensity constant
            "API_TOKEN" \                        # $16 CO2 grid API token
            "GMT_API_TOKEN" \                   # $17 GMT API token
            "true" \                            # $18 JSON output
            "API_ENDPOINT_ADD" \                # $19 API endpoint add
            "API_ENDPOINT_BADGE_GET" \          # $20 API endpoint badge
            "DASHBOARD_URL" \                   # $21 dashboard URL
            "placeholder22"                     # $22 placeholder to satisfy setup.sh

      # 5️⃣ Setup Gradle
      - name: Setup Gradle
        run: |
          GRADLE_VERSION=8.4
          wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
          unzip -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
          echo "PATH=/opt/gradle/gradle-$GRADLE_VERSION/bin:$PATH" >> $GITHUB_ENV
          gradle -v

      # 6️⃣ Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 7️⃣ Build project
      - name: Build with Gradle
        run: ./gradlew build --exclude-task test

      # 8️⃣ Get Eco-CI measurement (end)
      - name: End measurement
        run: bash /tmp/eco-ci/scripts/setup.sh end_measurement

      # 9️⃣ Display Eco-CI results as JSON
      - name: Display results
        run: bash /tmp/eco-ci/scripts/display-results.sh --json-output > /tmp/eco-ci/total-data.json

      # 🔟 Upload results as artifact
      - name: Upload Eco-CI total-data.json
        uses: actions/upload-artifact@v4
        with:
          name: eco-ci-total-data-gradle-${{ matrix.java }}-${{ matrix.distribution }}
          path: /tmp/eco-ci/total-data.json
          retention-days: 30
