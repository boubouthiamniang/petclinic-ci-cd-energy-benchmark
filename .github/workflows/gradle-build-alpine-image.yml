name: Java CI with Gradle (Alpine)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest        # Ubuntu runner is required; container will be Alpine
    container:
      image: alpine:latest        # Use Alpine Linux container
    strategy:
      matrix:
        java: [ '17' ] #, '21' ]
        distribution: [ 'temurin' ] #, 'corretto', 'zulu', 'liberica', 'microsoft' ]
    steps:
      - name: Install system dependencies
        run: |
          apk update
          apk add --no-cache wget unzip git curl bash gcompat libc6-compat
      - name: Install eco-ci dependencies
        run: |
          pip3 install requests psutil --break-system-packages
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: start-measurement
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.distribution }}
      - name: Setup Gradle
        run: |
          GRADLE_VERSION=8.4
          wget https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip -P /tmp
          unzip -d /opt/gradle /tmp/gradle-$GRADLE_VERSION-bin.zip
          echo "PATH=/opt/gradle/gradle-$GRADLE_VERSION/bin:$PATH" >> $GITHUB_ENV
          gradle -v
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build --exclude-task test
      - name: Get Build Measurement (Manual)
        id: total-measurement-step
        run: |
          # Custom Alpine-compatible energy measurement end
          START_TIME=$(cat /tmp/eco-ci/start-time)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Build duration: ${DURATION} seconds"
          echo "duration=${DURATION}" >> $GITHUB_OUTPUT
      - name: Show Energy Results (Manual)
        id: eco
        run: |
          # Custom energy calculation logic (would need to implement actual measurement)
          DURATION=${{ steps.total-measurement-step.outputs.duration }}
          echo "Build completed in ${DURATION} seconds"
          # This would need actual energy calculation logic
          echo '{"duration": '${DURATION}', "label": "Build gradle alpine"}' > /tmp/eco-ci/total-data.json
          echo "data-total-json={\"duration\": ${DURATION}}" >> $GITHUB_OUTPUT
      - name: Print total data JSON
        run: |
          echo "Total data JSON: ${{ steps.eco.outputs.data-total-json }}"
      - name: Upload total-data.json
        uses: actions/upload-artifact@v4
        with:
          name: eco-ci-total-data-gradle-${{ matrix.java }}-${{ matrix.distribution }}
          path: /tmp/eco-ci/total-data.json
          retention-days: 30