name: Deploy Docker Containers
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    services:
      demo-db:
        image: postgres:15
        env:
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
          POSTGRES_DB: demo
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U demo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: start-measurement

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Demo-DB to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U demo; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for Demo-DB... (attempt $i/30)"
            sleep 5
          done

      - name: Build Spring Boot Application
        run: |
          echo "Building Spring Boot application..."
          
          # Check if Maven wrapper exists
          if [ -f "./mvnw" ]; then
            echo "Using Maven wrapper..."
            chmod +x ./mvnw
            ./mvnw clean package -DskipTests
          elif [ -f "pom.xml" ]; then
            echo "Using system Maven..."
            mvn clean package -DskipTests
          else
            echo "❌ No Maven configuration found!"
            echo "Checking project structure..."
            ls -la
            exit 1
          fi
          
          # Check if JAR was built
          echo "Checking for built JAR files..."
          find . -name "*.jar" -type f
          
          # Verify target directory
          if [ -d "target" ]; then
            echo "Contents of target directory:"
            ls -la target/
          else
            echo "❌ No target directory found!"
            exit 1
          fi

      - name: Create Production Dockerfile
        run: |
          echo "Creating production Dockerfile..."
          cat > Dockerfile.prod << 'EOF'
          FROM openjdk:17-jre-slim
          
          # Create app directory
          RUN mkdir -p /app
          WORKDIR /app
          
          # Copy the built JAR file
          COPY target/*.jar app.jar
          
          # Expose port
          EXPOSE 8080
          
          # Set JVM options
          ENV JAVA_OPTS="-Xms512m -Xmx1024m"
          
          # Run the application
          CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
          EOF
          
          echo "Production Dockerfile created:"
          cat Dockerfile.prod

      - name: Build Docker image for Petclinic
        run: |
          echo "Building Petclinic Docker image..."
          
          # Build using the production Dockerfile
          docker build -t petclinic:latest -f Dockerfile.prod .
          
          # Inspect the built image
          echo "=== BUILT IMAGE INSPECTION ==="
          docker inspect petclinic:latest | jq '.[0] | {Config: .Config.Cmd, Entrypoint: .Config.Entrypoint, WorkingDir: .Config.WorkingDir}'
          
          # Verify the JAR file is in the image
          echo "=== CHECKING JAR FILE IN IMAGE ==="
          docker run --rm petclinic:latest ls -la /app/
          
          echo "Docker image built successfully"

      - name: Deploy Petclinic container
        run: |
          echo "Deploying Petclinic container..."
          
          # Deploy with the properly built image
          docker run -d --name petclinic -p 8080:8080 \
            --network host \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/demo \
            -e SPRING_DATASOURCE_USERNAME=demo \
            -e SPRING_DATASOURCE_PASSWORD=demo \
            -e SPRING_PROFILES_ACTIVE=postgres \
            -e JAVA_OPTS="-Xms512m -Xmx1024m" \
            petclinic:latest
          
          echo "Container started. Checking initial status..."
          sleep 5
          
          # Check if container is still running
          if ! docker ps --filter name=petclinic --format "table {{.Names}}\t{{.Status}}" | grep petclinic; then
            echo "❌ Container exited immediately!"
            echo "=== CONTAINER LOGS ==="
            docker logs petclinic
            exit 1
          fi
          
          # Check processes inside container
          echo "✅ Container is running. Checking processes..."
          docker exec petclinic ps aux
          
          echo "✅ Petclinic container deployed successfully"

      - name: Wait for Petclinic to start
        run: |
          echo "Waiting for Petclinic application to start..."
          
          # First, check if container is still running
          if ! docker ps --filter name=petclinic -q; then
            echo "❌ Petclinic container has stopped!"
            echo "=== CONTAINER LOGS ==="
            docker logs petclinic
            exit 1
          fi
          
          for i in {1..40}; do  # Reduced from 60 since we know it's not working
            # Check container health first
            if ! docker ps --filter name=petclinic -q; then
              echo "❌ Container died during startup!"
              docker logs petclinic
              exit 1
            fi
            
            # Check if application is responding
            if curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "✅ Petclinic is running!"
              break
            fi
            
            # Alternative check - try main page
            if curl -s -f http://localhost:8080/ >/dev/null 2>&1; then
              echo "✅ Petclinic main page is responding!"
              break
            fi
            
            echo "Waiting for Petclinic... (attempt $i/40)"
            
            # Show debugging info every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              echo "--- Debugging Info (attempt $i) ---"
              
              # Check processes inside container
              echo "Processes in container:"
              docker exec petclinic ps aux 2>/dev/null || echo "Cannot check processes"
              
              # Check Java process specifically
              echo "Java processes:"
              docker exec petclinic pgrep -fl java 2>/dev/null || echo "No Java processes found"
              
              # Show recent logs
              echo "Recent logs:"
              docker logs --tail 15 petclinic 2>&1
              
              # Check disk space in container
              echo "Disk usage:"
              docker exec petclinic df -h 2>/dev/null || echo "Cannot check disk"
              
              echo "--- End Debug Info ---"
            fi
            
            sleep 5
          done
          
          # Final comprehensive check
          if ! curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1 && ! curl -s -f http://localhost:8080/ >/dev/null 2>&1; then
            echo "❌ Petclinic failed to start after 200 seconds"
            echo "=== FINAL DIAGNOSIS ==="
            
            echo "Container status:"
            docker ps -a --filter name=petclinic
            
            echo "Container processes:"
            docker exec petclinic ps aux || echo "No processes running"
            
            echo "Full container logs:"
            docker logs petclinic
            
            echo "Container environment:"
            docker exec petclinic env || echo "Cannot check environment"
            
            echo "Working directory contents:"
            docker exec petclinic ls -la / || echo "Cannot list files"
            
            exit 1
          fi

      - name: Verify Deployment
        run: |
          echo "=== DEPLOYMENT VERIFICATION ==="
          
          # Check container status
          echo "Container status:"
          docker ps --filter name=petclinic
          
          # Check if application is responding
          if curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "✅ Petclinic is responding on port 8080"
          else
            echo "⚠️ Petclinic may not be fully ready yet"
          fi
          
          # Show resource usage
          echo "Container resource usage:"
          docker stats --no-stream petclinic

      - name: Show deployment logs on failure
        if: failure()
        run: |
          echo "=== DEPLOYMENT FAILURE LOGS ==="
          docker ps -a --filter name=petclinic
          echo "=== PETCLINIC LOGS ==="
          docker logs petclinic

      - name: Show Energy Results
        id: eco
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: display-results
          json-output: true

      - name: Print Energy Metrics
        run: |
          echo "=== ENERGY CONSUMPTION RESULTS ==="
          echo "Total energy data: ${{ steps.eco.outputs.data-total-json }}"

      - name: Upload Energy Data
        uses: actions/upload-artifact@v4
        with:
          name: eco-ci-total-data-docker-deploy
          path: /tmp/eco-ci/total-data.json
          retention-days: 30
        continue-on-error: true

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Cleaning up failed deployment..."
          docker rm -f petclinic || echo "Container already removed"

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Job Status: ${{ job.status }}"
          echo "Timestamp: $(date)"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "✅ Petclinic container is running on port 8080"
            echo "✅ PostgreSQL database is available on port 5432"
            echo ""
            echo "🔗 Access URLs (if running locally):"
            echo "   - Application: http://localhost:8080"
            echo "   - Health Check: http://localhost:8080/actuator/health"
          else
            echo "❌ Deployment failed - check logs above"
          fi