name: Deploy and Test Docker Containers
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy-and-test-docker:
    runs-on: ubuntu-latest
    services:
      demo-db:
        image: postgres:15
        env:
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
          POSTGRES_DB: demo
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U demo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: start-measurement

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Demo-DB to be healthy
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U demo; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for Demo-DB... (attempt $i/30)"
            sleep 5
          done
          
          # Verify database connection
          PGPASSWORD=demo psql -h localhost -p 5432 -U demo -d demo -c "SELECT version();" || {
            echo "Failed to connect to database"
            exit 1
          }

      - name: Build Docker image for Petclinic
        run: |
          echo "Building Petclinic Docker image..."
          docker build -t petclinic:latest -f .devcontainer/Dockerfile .
          echo "Docker image built successfully"

      - name: Run Petclinic container
        run: |
          echo "Starting Petclinic container..."
          docker run -d --name petclinic -p 8080:8080 \
            --network host \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/demo \
            -e SPRING_DATASOURCE_USERNAME=demo \
            -e SPRING_DATASOURCE_PASSWORD=demo \
            -e SPRING_PROFILES_ACTIVE=postgres \
            -e JAVA_OPTS="-Xms512m -Xmx1024m" \
            petclinic:latest
          echo "Petclinic container started"

      - name: Wait for Petclinic to be ready
        run: |
          echo "Waiting for Petclinic application to start..."
          for i in {1..60}; do
            if curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "Petclinic is ready!"
              curl -s http://localhost:8080/actuator/health | jq '.' || curl -s http://localhost:8080/actuator/health
              break
            fi
            echo "Waiting for Petclinic... (attempt $i/60)"
            sleep 5
            
            # Show container status for debugging
            if [ $((i % 10)) -eq 0 ]; then
              echo "Container status:"
              docker ps -a --filter name=petclinic
              echo "Recent logs:"
              docker logs --tail 10 petclinic
            fi
          done
          
          # Final health check
          if ! curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "Petclinic failed to start properly"
            docker logs petclinic
            exit 1
          fi

      - name: Run Application Tests
        run: |
          echo "Running application health tests..."
          
          # Test health endpoint
          echo "Testing health endpoint..."
          health_response=$(curl -s -f http://localhost:8080/actuator/health)
          echo "Health response: $health_response"
          
          # Test info endpoint (if available)
          echo "Testing info endpoint..."
          curl -s -f http://localhost:8080/actuator/info || echo "Info endpoint not available"
          
          # Test main application endpoint
          echo "Testing main application..."
          curl -s -f http://localhost:8080/ >/dev/null || echo "Main page test failed"
          
          # Test API endpoints (adjust based on your application)
          echo "Testing API endpoints..."
          curl -s -f http://localhost:8080/owners >/dev/null || echo "Owners endpoint test failed"
          curl -s -f http://localhost:8080/vets >/dev/null || echo "Vets endpoint test failed"

      - name: Test Database Connectivity
        run: |
          echo "Testing database connectivity..."
          
          # Test from host
          PGPASSWORD=demo psql -h localhost -p 5432 -U demo -d demo -c "
            SELECT 
              current_database() as database_name,
              current_user as connected_user,
              version() as postgresql_version;
          " || echo "Direct database test failed"
          
          # Test database tables (if your app creates them)
          echo "Checking application tables..."
          PGPASSWORD=demo psql -h localhost -p 5432 -U demo -d demo -c "
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public';
          " || echo "Table check failed"

      - name: Performance and Load Test
        run: |
          echo "Running basic performance tests..."
          
          # Simple load test with curl
          echo "Testing concurrent requests..."
          for i in {1..5}; do
            curl -s -f http://localhost:8080/actuator/health &
          done
          wait
          echo "Concurrent requests completed"
          
          # Response time test
          echo "Testing response time..."
          time curl -s -f http://localhost:8080/actuator/health >/dev/null

      - name: Collect Application Metrics
        run: |
          echo "Collecting application metrics..."
          
          # Container stats
          echo "Container resource usage:"
          docker stats --no-stream petclinic
          
          # Application metrics (if available)
          curl -s -f http://localhost:8080/actuator/metrics || echo "Metrics endpoint not available"
          
          # Log summary
          echo "Application log summary:"
          docker logs petclinic 2>&1 | tail -20

      - name: Show Petclinic logs on failure
        if: failure()
        run: |
          echo "=== PETCLINIC CONTAINER STATUS ==="
          docker ps -a --filter name=petclinic
          
          echo "=== PETCLINIC LOGS ==="
          docker logs petclinic
          
          echo "=== SYSTEM RESOURCES ==="
          docker stats --no-stream || true
          
          echo "=== NETWORK INFO ==="
          docker network ls
          netstat -tlnp | grep :8080 || true
          netstat -tlnp | grep :5432 || true

      - name: Show Energy Results
        id: eco
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: display-results
          json-output: true

      - name: Print Energy Metrics
        run: |
          echo "=== ENERGY CONSUMPTION RESULTS ==="
          echo "Total energy data: ${{ steps.eco.outputs.data-total-json }}"
          
          # Parse and display key metrics if available
          if [ ! -z "${{ steps.eco.outputs.data-total-json }}" ]; then
            echo "${{ steps.eco.outputs.data-total-json }}" | jq '.' || echo "Raw data: ${{ steps.eco.outputs.data-total-json }}"
          fi

      - name: Upload Energy Data
        uses: actions/upload-artifact@v4
        with:
          name: eco-ci-total-data-docker-deploy-and-test
          path: /tmp/eco-ci/total-data.json
          retention-days: 30
        continue-on-error: true

      - name: Upload Application Logs
        if: always()
        run: |
          # Create logs directory
          mkdir -p ./logs
          
          # Collect logs
          docker logs petclinic > ./logs/petclinic.log 2>&1 || echo "Failed to collect petclinic logs"
          
          # Collect system info
          echo "=== System Information ===" > ./logs/system-info.log
          docker --version >> ./logs/system-info.log
          docker ps -a >> ./logs/system-info.log
          docker images >> ./logs/system-info.log

      - name: Upload Logs Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: ./logs/
          retention-days: 7
        continue-on-error: true

      - name: Cleanup Docker containers
        if: always()
        run: |
          echo "Cleaning up Docker containers..."
          
          # Stop and remove petclinic container
          docker rm -f petclinic || echo "Petclinic container already removed"
          
          # Clean up unused images (optional)
          docker image prune -f || echo "Image cleanup failed"
          
          # Show final status
          echo "Remaining containers:"
          docker ps -a
          
          echo "Cleanup completed"

      - name: Report Test Results
        if: always()
        run: |
          echo "=== PIPELINE EXECUTION SUMMARY ==="
          echo "Job Status: ${{ job.status }}"
          echo "Timestamp: $(date)"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All tests passed successfully!"
            echo "✅ Petclinic application deployed and tested"
            echo "✅ Database connectivity verified"
            echo "✅ Performance tests completed"
          else
            echo "❌ Pipeline failed - check logs above"
            echo "❌ Review the 'Show Petclinic logs on failure' step for details"
          fi