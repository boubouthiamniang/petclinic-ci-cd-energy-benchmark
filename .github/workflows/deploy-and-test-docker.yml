name: Deploy Docker Containers
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    services:
      demo-db:
        image: postgres:15
        env:
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
          POSTGRES_DB: demo
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U demo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: start-measurement

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Demo-DB to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U demo; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for Demo-DB... (attempt $i/30)"
            sleep 5
          done

      - name: Test Database Connection
        run: |
          echo "Testing database connection..."
          PGPASSWORD=demo psql -h localhost -U demo -d demo -c "SELECT version();"
          echo "‚úÖ Database connection successful"

      - name: Replace with Production Dockerfile
        run: |
          echo "Replacing existing Dockerfile with production version..."
          echo "Current Dockerfile (first 5 lines):"
          head -5 Dockerfile 2>/dev/null || echo "Dockerfile not readable or empty"
          
          cat > Dockerfile << 'EOF'
          # Multi-stage build for Spring Boot Petclinic
          FROM openjdk:17-jdk-slim as builder

          # Install curl for health checks
          RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

          # Set working directory
          WORKDIR /app

          # Copy Maven wrapper and configuration files first for better caching
          COPY mvnw .
          COPY .mvn .mvn
          COPY pom.xml .

          # Make mvnw executable
          RUN chmod +x ./mvnw

          # Download dependencies (cached layer if pom.xml doesn't change)
          RUN ./mvnw dependency:go-offline -B

          # Copy source code
          COPY src ./src

          # Build the application (skip tests for faster build)
          RUN ./mvnw clean package -DskipTests -B

          # Production stage
          FROM openjdk:17-jre-slim

          # Install curl for health checks
          RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

          # Create non-root user for security
          RUN groupadd -r spring && useradd -r -g spring spring

          # Set working directory
          WORKDIR /app

          # Copy the built JAR from builder stage
          COPY --from=builder /app/target/spring-petclinic-*.jar app.jar

          # Change ownership to spring user
          RUN chown spring:spring app.jar

          # Switch to non-root user
          USER spring

          # Expose the application port
          EXPOSE 8080

          # Add health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8080/actuator/health || exit 1

          # Run the Spring Boot application
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          
          echo "‚úÖ Production Dockerfile created successfully"
          echo "New Dockerfile size: $(wc -l < Dockerfile) lines"

      - name: Build Docker image for Petclinic
        run: |
          echo "Building Petclinic Docker image with production Dockerfile..."
          docker build -t petclinic:latest .
          echo "‚úÖ Docker image built successfully"
          
          # Verify the image was created
          docker images petclinic:latest

      - name: Deploy Petclinic container
        run: |
          echo "Deploying Petclinic container..."
          
          # Remove any existing container
          docker rm -f petclinic 2>/dev/null || true
          
          # Deploy with production configuration
          docker run -d --name petclinic -p 8080:8080 \
            --network host \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/demo \
            -e SPRING_DATASOURCE_USERNAME=demo \
            -e SPRING_DATASOURCE_PASSWORD=demo \
            -e SPRING_PROFILES_ACTIVE=postgres \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
            -e SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect \
            -e JAVA_OPTS="-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom" \
            -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG \
            -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
            petclinic:latest
          
          echo "Container started. Checking initial status..."
          sleep 5
          
          # Verify container is running
          if docker ps --filter name=petclinic --filter status=running | grep -q petclinic; then
            echo "‚úÖ Petclinic container is running successfully"
            docker ps --filter name=petclinic --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          else
            echo "‚ùå Container failed to start properly"
            echo "Container status:"
            docker ps -a --filter name=petclinic
            echo "Container logs:"
            docker logs petclinic
            exit 1
          fi

      - name: Wait for Petclinic to start
        run: |
          echo "Waiting for Petclinic application to start..."
          for i in {1..60}; do
            if curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ Petclinic is running and healthy!"
              break
            fi
            echo "Waiting for Petclinic... (attempt $i/60)"
            
            # Show container status and logs every 10 attempts for debugging
            if [ $((i % 10)) -eq 0 ]; then
              echo "--- Debugging Info (attempt $i) ---"
              echo "Container status:"
              docker ps --filter name=petclinic
              echo "Container logs (last 10 lines):"
              docker logs --tail 10 petclinic 2>&1
              echo "Memory usage:"
              docker stats --no-stream petclinic 2>/dev/null || echo "Stats not available"
              echo "Port status:"
              netstat -tlnp | grep :8080 || echo "Port 8080 not bound"
              echo "--- End Debug Info ---"
            fi
            
            sleep 5
          done
          
          # Final check and detailed error if failed
          if ! curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "‚ùå Petclinic failed to start after 5 minutes"
            echo "=== FINAL DEBUG INFO ==="
            docker ps -a --filter name=petclinic
            echo "=== FULL CONTAINER LOGS ==="
            docker logs petclinic
            exit 1
          fi

      - name: Verify Deployment
        run: |
          echo "=== DEPLOYMENT VERIFICATION ==="
          
          # Check container status
          echo "Container status:"
          docker ps --filter name=petclinic
          
          # Test health endpoint
          echo "Testing health endpoint:"
          if curl -s http://localhost:8080/actuator/health | jq . 2>/dev/null; then
            echo "‚úÖ Health endpoint is responding with JSON"
          else
            echo "Health endpoint response (raw):"
            curl -s http://localhost:8080/actuator/health || echo "Failed to connect"
          fi
          
          # Test main application endpoint
          echo "Testing main application endpoint:"
          if curl -s -I http://localhost:8080/ | head -1; then
            echo "‚úÖ Main application is responding"
          else
            echo "‚ö†Ô∏è Main application may not be ready"
          fi
          
          # Show resource usage
          echo "Container resource usage:"
          docker stats --no-stream petclinic

      - name: Show deployment logs on failure
        if: failure()
        run: |
          echo "=== DEPLOYMENT FAILURE LOGS ==="
          docker ps -a --filter name=petclinic
          echo "=== PETCLINIC LOGS ==="
          docker logs petclinic
          echo "=== SYSTEM INFO ==="
          df -h
          free -h
          docker system df

      - name: Show Energy Results
        id: eco
        uses: green-coding-solutions/eco-ci-energy-estimation@v3
        with:
          task: display-results
          json-output: true

      - name: Print Energy Metrics
        run: |
          echo "=== ENERGY CONSUMPTION RESULTS ==="
          echo "Total energy data: ${{ steps.eco.outputs.data-total-json }}"

      - name: Upload Energy Data
        uses: actions/upload-artifact@v4
        with:
          name: eco-ci-total-data-docker-deploy
          path: /tmp/eco-ci/total-data.json
          retention-days: 30
        continue-on-error: true

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Cleaning up failed deployment..."
          docker rm -f petclinic || echo "Container already removed"

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Job Status: ${{ job.status }}"
          echo "Timestamp: $(date)"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "‚úÖ Petclinic container is running on port 8080"
            echo "‚úÖ PostgreSQL database is available on port 5432"
            echo ""
            echo "üîó Access URLs (if running locally):"
            echo "   - Application: http://localhost:8080"
            echo "   - Health Check: http://localhost:8080/actuator/health"
            echo ""
            echo "üìä Final Container Status:"
            docker ps --filter name=petclinic --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          else
            echo "‚ùå Deployment failed - check logs above"
          fi